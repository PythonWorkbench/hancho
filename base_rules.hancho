####################################################################################################
# Utils

touch_outputs = hancho.Command(
    command="touch {in_files}",
    in_files=None,
)

####################################################################################################
# C++

default_warnings = ["unused-variable", "error"]
default_cpp_std  = "gnu++2a"
default_ld_opt   = "{'-O3' if build_tag == 'release' else '-g -O0'}"

# -------------------------------------------------------------------------------

default_toolchain = hancho.Config(
    arch     = "x86-64",
    compiler = "x86_64-linux-gnu-g++",
    linker   = "x86_64-linux-gnu-g++",
)

riscv64_toolchain = hancho.Config(
    arch     = "riscv64",
    compiler = "riscv64-unknown-elf-g++",
    linker   = "riscv64-unknown-elf-g++",
)

# ----------------------------------------

check_cpp = hancho.Command(
    desc    = "Checking C++ syntax of {rel(in_src)}",
    command = "{toolchain.compiler} {flags} {joined_warnings} {joined_defines} {joined_includes} -c {rel(in_src)} && touch {rel(out_ok)}",
    in_src  = None,
    out_ok  = "{in_src}.ok",
    toolchain = default_toolchain,
    flags    = ["-fsyntax-only", "-std={cpp_std}"],
    cpp_std  = "gnu++2a",
    joined_warnings = "{join_prefix('-W', get('warnings', []))}",
    joined_defines  = "{join_prefix('-D', get('defines', []))}",
    joined_includes = "{join_prefix('-I', get('includes', []))}",
)

# ----------------------------------------

compile_cpp = hancho.Command(
    desc    = "Compiling C++ {rel(in_src)} -> {rel(out_obj)} ({build_tag})",
    command = "{toolchain.compiler} {flags} {joined_warnings} {joined_defines} {joined_includes} -c {rel(in_src)} -o {rel(out_obj)}",

    in_src  = None,
    out_obj = "{swap_ext(in_src, '.o')}",
    c_deps  = "{swap_ext(in_src, '.d')}",

    toolchain=default_toolchain,
    cpp_std="gnu++2a",
    flags=[
        "-g",
        "-O0",
        "-MMD",
        "-march={toolchain.arch}",
        "-std={cpp_std}",
        "-fdiagnostics-color=always",
    ],
    joined_warnings = "{join_prefix('-W', get('warnings', []))}",
    joined_defines  = "{join_prefix('-D', get('defines', []))}",
    joined_includes = "{join_prefix('-I', get('includes', []))}",
)

"""
if os.name == 'nt':
    compile_cpp.command =
        "cl.exe /c {rel(in_src)} /sourceDependencies {rel(c_deps)} /Fo:{rel(out_obj)}",
    compile_cpp.c_depformat = "msvc",
"""

# ----------------------------------------

link_cpp_lib = hancho.Command(
    desc="Bundling C++ lib {rel(out_lib)}",
    in_objs=None,
    out_lib=None,
    command="ar rcs {rel(out_lib)} {rel(in_objs)}",
)

# ----------------------------------------

link_cpp_bin = hancho.Command(
    desc="Linking C++ bin {rel(out_bin)}",
    out_bin=None,
    toolchain=default_toolchain,
    command="{toolchain.linker} {linker_group} {get('flags', [])} {joined_sys_libs} -o {rel(out_bin)}",
    flags=[],
    linker_group=[
        "-Wl,--as-needed",
        "-Wl,--no-undefined",
        "-Wl,--start-group",
        "{rel(get('in_objs', []))}",
        "{rel(get('in_libs', []))}",
        "-Wl,--end-group",
    ],
    joined_sys_libs="{join_prefix('-l', get('sys_libs', []))}",
)

# ----------------------------------------

def cpp_lib(hancho, *args, in_srcs=[], in_objs=[], in_libs=[], out_lib = [], **kwargs):
    config = hancho.Config(*args, **kwargs)
    in_objs = hancho.flatten(in_objs)
    for file in hancho.flatten(in_srcs):
        obj = hancho(compile_cpp, config, in_src=file)
        in_objs.append(obj)

    return hancho(
        link_cpp_lib,
        config,
        in_objs=[in_objs, in_libs],
        out_lib=out_lib
    )

def cpp_bin(hancho, *args, in_srcs=[], in_objs=[], in_libs=[], out_bin = [], **kwargs):
    config = hancho.Config(args, kwargs)

    in_objs = hancho.flatten(in_objs)
    for file in hancho.flatten(in_srcs):
        obj = hancho(compile_cpp, config, in_src=file)
        in_objs.append(obj)

    return hancho(
        link_cpp_bin,
        config,
        in_objs=[in_objs, in_libs],
        out_bin = out_bin,
    )

####################################################################################################
# Makefiles

def make(hancho, /, *args, in_makefile, **kwargs):
    cmd = hancho.Command(
        desc        = "Run makefile {rel(in_makefile)}",
        command     = "make -C {make_dir} -f {make_file} {flags}", #  > /dev/null
        make_dir    = "{path.dirname(in_makefile)}",
        make_file   = "{path.basename(in_makefile)}",
        flags       = "--quiet",
    )
    return hancho(cmd, *args, in_makefile = in_makefile, **kwargs)

####################################################################################################
# Tests

run_test = hancho.Command(
    desc     = "Running test {rel(in_test)}",
    command  = "{in_test} {args} && touch {out_pass}",
    task_dir = "{test_dir}",
    test_dir = "{mod_dir}",
    args     = "",
    in_test  = None,
    out_pass = "{in_test}.pass",
    log_path = "{in_test}.log",
)

def cpp_test(
    hancho,
    *args,
    in_srcs=[],
    in_objs=[],
    in_libs=[],
    out_bin=[],
    **kwargs
):
    config = hancho.Config(*args, **kwargs)
    objs = [hancho(compile_cpp, config, in_src=src) for src in hancho.flatten(in_srcs)]
    test_bin = hancho(
        link_cpp_bin,
        config,
        in_objs=[objs, in_objs, in_libs],
        out_bin=out_bin,
    )
    return hancho(run_test, config, in_test=test_bin)
