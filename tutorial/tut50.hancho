# tutorial/tut50.hancho - Async/await and custom commands
import asyncio

build_config.build_tag = "tut50"

# Synchronous functions can be used in place of command strings.

def sync_callback(task):
  print("Sync callback begin")
  for abs_file in task.abs_build_files:
    print(f"Writing {abs_file}")
    with open(abs_file, 'w', encoding="utf-8") as file:
      file.write("hello world")
  print("Sync callback end")
  return task.abs_build_files

fast_task = build_config.rule(command = sync_callback)
fast_task(["src/main.cpp"], ["fast1.txt", "fast2.txt", "fast3.txt"])

# Asynchronous functions can also be used in place of command strings.

async def async_callback(task):
  print("Async callback begin")
  for abs_file in task.abs_build_files:
    print(f"Writing {abs_file}")
    with open(abs_file, 'w', encoding="utf-8") as file:
      file.write("hello world")
    await asyncio.sleep(0.1)
  print("Async callback end")
  return task.abs_build_files

slow_task = build_config.rule(command = async_callback)
slow_task(["src/main.cpp"], ["slow1.txt", "slow2.txt", "slow3.txt"])

# Promises that resolve to filenames can be used in place of actual filenames in rules.

async def slow_filename_promise():
  print("Slow promise begin")
  await asyncio.sleep(0.1)
  print("Slow promise end")
  return ["src/main.cpp"]

echo = build_config.rule(
  command = "echo {rel_source_files} > {rel_build_files}",
)
echo([slow_filename_promise()], ["promise1.txt"])
