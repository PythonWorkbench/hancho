# tutorial/tut2.hancho - Extending base_rule & calling builtin functions
import hancho

# To make all rules in this tutorial use the same build directory, we can set
# build_dir in hancho's global configuration.
hancho.config.set(build_dir = "build/tut2")

# By using the swap_ext built-in, we can make our files_out and depfile
# parameters generic so we don't have to specify them for each invocation.
rule_compile = hancho.Rule(
  desc      = "Compile {files_in} -> {files_out}",
  command   = "g++ -MMD -c {files_in} -o {files_out}",
  files_out = "{swap_ext(files_in, '.o')}",
  depfile   = "{build_dir}/{swap_ext(files_in, '.d')}",
)

rule_link = hancho.Rule(
  desc      = "Link {files_in} -> {files_out}",
  command   = "g++ {files_in} -o {files_out}",
)

# Now we don't need files_out here, and we'll also automatically pick up the
# GCC dependency file generated by the -MMD option.
main_o = rule_compile(
  files_in = "src/main.cpp",
)

# Same here, Hancho will automatically look for util.d
util_o = rule_compile(
  files_in = "src/util.cpp"
)

# And we can pass both the compiled .o files to our linker
rule_link(
  files_in = [main_o, util_o],
  files_out = "app"
)
