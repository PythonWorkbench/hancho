import hancho

####################################################################################################
# C++

# ld_opt   = "{'-O3' if build_tag == 'release' else '-g -O0'}",

cpp_config = hancho.Config(
  toolchain  = "x86_64-linux-gnu",
  compiler   = "{toolchain}-g++",
  linker     = "{toolchain}-g++",

  arch       = "",
  cpp_std    = "-std=gnu++2a",
  build_type = "-g -O0",

  cpp_flags  = ["-fdiagnostics-color=always"],
  link_flags = [],

  warnings = [],
  defines  = [],
  includes = ["."],
  sys_libs = [],

  joined_warnings  = "{join_prefix('-W', warnings)}",
  joined_defines   = "{join_prefix('-D', defines)}",
  joined_includes  = "{join_prefix('-I', includes)}",
  joined_sys_libs  = "{join_prefix('-l', sys_libs)}",
)

#----------------------------------------

def compile_cpp(*args, in_src, **kwargs):
  command = hancho.Config(
    desc    = "Compiling C++ {rel(in_src)} -> {rel(out_obj)} ({build_tag})",
    command = "{compiler} {arch} {cpp_std} {build_type} {cpp_flags} {joined_warnings} {joined_defines} {joined_includes} -MMD -c {rel(in_src)} -o {rel(out_obj)}",
    out_obj = "{swap_ext(in_src, '.o')}",
    depfile = "{swap_ext(in_src, '.d')}",
  )
  return hancho.Task(
    command,
    cpp_config,
    *args,
    **kwargs,
    in_src = in_src
  )

exports.compile_cpp  = hancho.Command(compile_cpp)

#----------------------------------------

def link_cpp_lib(*, name, in_objs, **kwargs):
  cmd = hancho.Command(
    desc    = "Bundling C++ lib {rel(out_lib)}",
    command = "ar rcs {rel(out_lib)} {rel(in_objs)}",
    out_lib = "{name}",
  )
  return cmd(
    name = name,
    in_objs = in_objs,
    **kwargs
  )

exports.link_cpp_lib = hancho.Command(link_cpp_lib)

#----------------------------------------

def link_cpp_bin(*, name, **kwargs):
  cmd = hancho.Command(
    desc = "Linking C++ bin {rel(out_bin)}",
    command = "{linker} {linker_group} {link_flags} {joined_sys_libs} -o {rel(out_bin)}",
    linker_group = [
      "-Wl,--as-needed",
      "-Wl,--no-undefined",
      "-Wl,--start-group",
      "{rel(in_objs)}",
      "{rel(in_libs)}",
      "-Wl,--end-group",
    ],
    in_objs = [],
    in_libs = [],
    out_bin = "{name}",
    **cpp_config,
  )
  return cmd(name = name, **kwargs)

exports.link_cpp_bin = hancho.Command(link_cpp_bin)

#----------------------------------------

def cpp_bin(*, name, in_srcs = [], in_objs = [], in_libs = [], out_bin = "{name}", **kwargs):

  objs = [compile_cpp(in_src = file, **kwargs) for file in hancho.flatten(in_srcs)]

  return link_cpp_bin(
    name = name,
    in_objs = [objs, in_objs, in_libs],
    out_bin = out_bin,
    **kwargs,
  )

exports.cpp_bin = hancho.Command(cpp_bin)

#----------------------------------------

def cpp_lib(*, name, in_srcs = [], in_objs = [], in_libs = [], out_lib = "{name}", **kwargs):

  objs = [compile_cpp(in_src = file, **kwargs) for file in hancho.flatten(in_srcs)]

  return link_cpp_lib(
    name = name,
    in_objs = [objs, in_objs, in_libs],
    out_lib = out_lib,
    **kwargs,
  )

exports.cpp_lib = hancho.Command(cpp_lib)

#----------------------------------------

rv_config = cpp_config.extend(
  toolchain = "riscv64-unknown-elf",
  arch       = "-march=rv32i -mabi=ilp32 -mstrict-align",
  cpp_std    = "-std=gnu++2a",
  build_type = "-g -Os",
  link_flags = [
    "-nostdlib",
    "-nostartfiles",
    "-Wl,-T {linkerscript}",
  ],
  #in_ld = "link.ld",
  #sys_libs = ["gcc"],
)

####################################################################################################
# Makefiles

def make(*, in_makefile, **kwargs):
  return hancho.Task(
    command     = "make -C {make_path} -f {make_file} {flags} > /dev/null",
    in_makefile = in_makefile,
    make_path   = "{path.dirname(in_makefile)}",
    make_file   = "{path.basename(in_makefile)}",
    flags       = "--quiet",
    **kwargs
  )

exports.make = hancho.Command(make)











####################################################################################################
# Tests

def c_test(*, name, in_srcs = [], in_objs = [], in_libs = [], out_bin = "{name}", **kwargs):
  objs = [compile_cpp(in_src = src, **kwargs) for src in hancho.flatten(in_srcs)]

  bin = link_cpp_bin(
    name = name,
    in_objs = [objs, in_objs, in_libs],
    out_bin = out_bin,
    **kwargs
  )

  run_test = hancho.Command(
    desc    = "Running test {rel(in_test)}",
    command = "{in_test} {args}",
    in_test = None,
    out_log = "{in_test}.test",
    args    = "",
    is_test = True,
  )

  return run_test(in_test = bin)

exports.c_test = hancho.Command(c_test)












"""
base = hancho.Config(
  toolchain  = "x86_64-linux-gnu",
  build_type = "-g -O0",
  warnings   = "-Wunused-variable -Werror",
  defines    = "-DCONFIG_DEBUG",
  cpp_std    = "-std=gnu++2a",
  includes   = "-I. -I{repo_path} -I{repo_path}/symlinks -I{repo_path}/symlinks/metrolib -I{repo_path}/symlinks/metron ",
)

exports.check_cpp = base.extend(
  desc    = "Syntax checking {rel(in_src)}",
  command = "{toolchain}-g++ -fsyntax-only -MMD {cpp_std} {warnings} {build_type} {includes} {defines} -c {rel(in_src)} && touch {rel(out_ok)}",
  in_src  = [],
  out_ok  = "{in_src}.ok",
  depfile = "{swap_ext(in_src, '.d')}",
)

exports.compile_cpp = base.extend(
  desc    = "Compiling C++ {rel(in_src)} => {rel(out_obj)}",
  command = "{toolchain}-g++ -MMD {cpp_std} {warnings} {build_type} {includes} {defines} -c {rel(in_src)} -o {rel(out_obj)}",
  in_src  = [],
  out_obj = "{swap_ext(in_src, '.o')}",
  depfile = "{swap_ext(in_src, '.d')}",
)

exports.compile_c = base.extend(
  desc    = "Compiling C {rel(in_src)} => {rel(out_obj)}",
  command = "{toolchain}-gcc -MMD {warnings} {build_type} {includes} {defines} -c {rel(in_src)} -o {rel(out_obj)}",
  in_src  = [],
  out_obj = "{swap_ext(in_src, '.o')}",
  depfile = "{swap_ext(in_src, '.d')}",
)

exports.link_c_lib = base.extend(
  desc    = "Bundling {rel(out_lib)}",
  command = "ar rcs {rel(in_objs)} {rel(out_lib)}",
  in_objs = [],
  out_lib = [],
)

exports.link_c_bin  = base.extend(
  desc    = "Linking {rel(out_bin)}",
  command = "{toolchain}-g++ -g -Wl,--as-needed -Wl,--no-undefined -Wl,--start-group {rel(in_objs)} {rel(in_libs)} {sys_libs} -Wl,--end-group -o {rel(out_bin)}",
  in_objs = [],
  in_libs = [],
  sys_libs = [],
  out_bin = [],
)

def cpp_binary(in_srcs, out_bin, **kwargs):
  objs = [exports.compile_cpp(in_src = file, **kwargs) for file in in_srcs]
  return exports.link_c_bin(in_obs = objs, out_bin = out_bin, **kwargs)

def cpp_lib(in_srcs, out_bin, **kwargs):
  objs = [exports.compile_cpp(in_src = file, **kwargs) for file in in_srcs]
  return exports.link_c_lib(in_obs = objs, out_bin = out_bin, **kwargs)

def c_lib(in_srcs, out_bin, **kwargs):
  objs = [exports.compile_c(in_src = file, **kwargs) for file in in_srcs]
  return exports.link_c_lib(in_obs = objs, out_bin = out_bin, **kwargs)

exports.cpp_binary = cpp_binary
exports.cpp_lib = cpp_lib
exports.c_lib = c_lib

exports.rv_base = hancho.Config(
  arch = "-march=rv32i -mabi=ilp32 -mstrict-align",
)

exports.rv_compile = exports.rv_base.extend(
  command = "riscv64-unknown-elf-gcc {opts} -c {rel(in_src)} -o {rel(out_obj)}",
  opts    = "{arch} -g -Os -std=gnu++2a  -MMD",
  in_src  = [],
  out_obj = "{swap_ext(in_src, '.o')}",
  depfile = "{swap_ext(in_src, '.d')}",
)

exports.rv_link = exports.rv_base.extend(
  command = "riscv64-unknown-elf-gcc {arch} -nostdlib -nostartfiles -Wl,-T {in_ld} -lgcc {rel(in_objs)} {rel(in_libs)} -o {rel(out_bin)}",
  in_ld   = "{root_dir}/pinwheel/tools/pinwheel.ld",
  in_objs = [],
  in_libs = [],
  out_bin = [],
)


exports.metron = hancho.Config(
  command = "{repo_path}/symlinks/metron/build/debug/metron/metron/metron -q -v -e -c {in_src} -o {out_sv}",
  depfile = "{swap_ext(in_src, '.d')}",
  in_src  = [],
  out_sv  = "{swap_ext(in_src, '.sv')}",
)

exports.sv2v = hancho.Config(
  command = "symlinks/sv2v/bin/sv2v {includes} {in_src} -w {out_v}",
  in_src  = [],
  out_v   = "{in_src}.2.v",
)



base = hancho.extend(
  toolchain  = "x86_64-linux-gnu",
  build_type = "-g -O0",
  warnings   = "-Wunused-variable -Werror",
  defines    = "-DCONFIG_DEBUG",
  cpp_std    = "-std=gnu++2a",
  includes   = "-I. -Isymlinks -Isymlinks/metrolib -Isymlinks/metron ",
)

check_cpp = base.command(
  desc        = "Syntax checking {source_files}",
  command     = "{toolchain}-g++ -fsyntax-only -MMD {cpp_std} {warnings} {build_type} {includes} {defines} -c {source_files} && touch {build_files}",
  build_files = "{swap_ext(source_files, '.ok')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
)

compile_cpp = base.command(
  desc        = "Compiling C++ {source_files} => {build_files}",
  command     = "{toolchain}-g++ -MMD {cpp_std} {warnings} {build_type} {includes} {defines} -c {source_files} -o {build_files}",
  build_files = "{swap_ext(source_files, '.o')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
)



rv_base = hancho.extend(
  arch         = "-march=rv32i -mabi=ilp32 -mstrict-align",
)

rv_compile = rv_base.command(
  command   = "riscv64-unknown-elf-gcc {opts} -c {source_files} -o {build_files}",
  opts      = "{arch} -g -Os -std=gnu++2a  -MMD",
  build_files = "{swap_ext(source_files, '.o')}",
  depfile   = "{swap_ext(build_files, '.d')}",
)

rv_link = rv_base.command(
  command      = "riscv64-unknown-elf-gcc {source_files} {opts} -o {build_files}",
  opts         = "{arch} -nostdlib -nostartfiles -Wl,-T {linkerscript} -lgcc",
  build_deps   = "{linkerscript}",
  linkerscript = "{root_dir}/pinwheel/tools/pinwheel.ld",
)


metron = hancho.command(
  command   = "{repo_path}/symlinks/metron/build/metron/metron -q -v -e -c {source_files} -o {build_files}",
  depfile   = "{swap_ext(source_files, '.d')}",
  build_files = "{swap_ext(source_files, '.sv')}",
)

sv2v = hancho.command(
  command = "{repo_path}/symlinks/sv2v/bin/sv2v {includes} {source_files} -w {build_files}",
  build_files = "{swap_ext(source_files, '.sv.2.v')}",
)

"""













"""
if os.name == 'nt':
  exports.compile_cpp = hancho.command(
    command     = "cl.exe /c {rel_source_files} /sourceDependencies {rel_build_deps} /Fo:{rel_build_files}",
    build_files = "{swap_ext(source_files, '.o')}",
    build_deps  = "{swap_ext(source_files, '.d')}",
    depformat   = "msvc",
  )
elif os.name == 'posix':
  exports.compile_cpp = hancho.command(
    command     = "gcc -MMD -c {rel_source_files} -o {rel_build_files}",
    build_files = "{swap_ext(source_files, '.o')}",
    build_deps  = "{swap_ext(source_files, '.d')}",
    depformat   = "gcc",
  )
else:
  assert False

"""

def touch_outputs(*, in_files, **kwargs):
  return hancho.Task(
    command = "touch {in_files}",
    in_files = in_files,
  )

exports.touch_outputs = hancho.Command(touch_outputs)

"""


def link_c_bin(in_objs, out_bin, *args, **kwargs):
  command = hancho.Command(
    desc     = "Linking {rel(out_bin)}",
    command  = "g++ {ld_opt} {warnings} {rel(in_objs)} {libs} {sys_libs} -o {rel(out_bin)}",
    libs     = "",
    sys_libs = "",
    warnings = "-Wall",
  )
  return command(in_objs = in_objs, out_bin = out_bin, **kwargs)

#-------------------------------------------------------------------------------

def compile_srcs(*args, in_srcs, **kwargs):
  config  = hancho.Config(*args, **kwargs)
  command = hancho.Command(
    desc     = "Compiling {rel(in_src)} -> {rel(out_obj)} ({build_tag})",
    command  = "g++ {cpp_std} {gcc_opt} {warnings} {includes} {defines} -c {rel(in_src)} -o {rel(out_obj)}",
    cpp_std  = "-std=c++20",
    gcc_opt  = "{'-O3' if build_tag == 'release' else '-g -O0'} -MMD",
    warnings = "-Wall -Werror -Wno-unused-variable -Wno-unused-local-typedefs -Wno-unused-but-set-variable",
    includes = "-I{repo_path}",
    defines  = "",
    out_obj  = "{swap_ext(in_src, '.o')}",
    depfile  = "{swap_ext(in_src, '.d')}",
    **kwargs,
  )
  return [command(config, in_src = file, **kwargs) for file in hancho.flatten(in_srcs)]

def c_binary(*, in_srcs = [], in_objs = [], out_bin, **kwargs):
  objs = compile_srcs(config, in_srcs = in_srcs, **kwargs)
  return link_c_bin(objs + in_objs, out_bin, **kwargs)

def c_library(*args, in_srcs = [], in_objs = [], out_lib, **kwargs):
  config = hancho.Config(*args, **kwargs)
  objs = compile_srcs(config, in_srcs=in_srcs)
  return link_c_lib(objs + in_objs, out_lib, config)

#-------------------------------------------------------------------------------

exports.c_binary  = c_binary
exports.c_library = c_library
"""
