import os

####################################################################################################
# Utils

touch_outputs = hancho.new_command(
  command = "touch {in_files}",
  in_files = None,
)

####################################################################################################
# C++

# ld_opt   = "{'-O3' if build_tag == 'release' else '-g -O0'}",

"""
if os.name == 'nt':
  exports.compile_cpp = hancho.new_command(
    command     = "cl.exe /c {rel_source_files} /sourceDependencies {rel_build_deps} /Fo:{rel_build_files}",
    build_files = "{swap_ext(source_files, '.o')}",
    build_deps  = "{swap_ext(source_files, '.d')}",
    depformat   = "msvc",
  )
elif os.name == 'posix':
  exports.compile_cpp = hancho.Command(
    command     = "gcc -MMD -c {rel_source_files} -o {rel_build_files}",
    build_files = "{swap_ext(source_files, '.o')}",
    build_deps  = "{swap_ext(source_files, '.d')}",
    depformat   = "gcc",
  )
else:
  assert False
"""

#-------------------------------------------------------------------------------

default_toolchain = hancho.new_config(
  arch     = "x86-64",
  compiler = "x86_64-linux-gnu-g++",
  linker   = "x86_64-linux-gnu-g++",
)

riscv64_toolchain = hancho.new_config(
  arch     = "riscv64",
  compiler = "riscv64-unknown-elf-g++",
  linker   = "riscv64-unknown-elf-g++",
)

#----------------------------------------

#rv_config = cpp_config.extend(
#  toolchain = "riscv64-unknown-elf",
#  arch       = "-march=rv32i -mabi=ilp32 -mstrict-align",
#  cpp_std    = "-std=gnu++2a",
#  build_type = "-g -Os",
#  flags = [
#    "-nostdlib",
#    "-nostartfiles",
#    "-Wl,-T {linkerscript}",
#  ],
#  #in_ld = "link.ld",
#  #sys_libs = ["gcc"],
#  #linkerscript = "{root_dir}/pinwheel/tools/pinwheel.ld",
#)

#----------------------------------------

compile_cpp = hancho.new_command(
  name    = None,
  desc    = "Compiling C++ {rel(in_src)} -> {rel(out_obj)} ({build_tag})",

  in_src  = None,
  out_obj = "{swap_ext(in_src, '.o')}",
  depfile = "{swap_ext(in_src, '.d')}",

  toolchain = default_toolchain,
  command = "{toolchain.compiler} {flags} {joined_warnings} {joined_defines} {joined_includes} -c {rel(in_src)} -o {rel(out_obj)}",
  cpp_std = "gnu++2a",
  flags = [
    "-g",
    "-O0",
    "-MMD",
    "-march={toolchain.arch}",
    "-std={cpp_std}",
    "-fdiagnostics-color=always"
  ],
  warnings = [],
  defines  = [],
  includes = ["."],

  joined_warnings  = "{join_prefix('-W', warnings)}",
  joined_defines   = "{join_prefix('-D', defines)}",
  joined_includes  = "{join_prefix('-I', includes)}",
)

#----------------------------------------

link_cpp_lib = hancho.new_command(
  name    = None,
  desc    = "Bundling C++ lib {rel(out_lib)}",

  in_objs = None,
  out_lib = "{name}",

  command = "ar rcs {rel(out_lib)} {rel(in_objs)}",
)

#----------------------------------------

link_cpp_bin = hancho.new_command(
  name    = None,
  desc    = "Linking C++ bin {rel(out_bin)}",

  in_objs = None,
  in_libs = [],
  out_bin = "{name}",

  toolchain = default_toolchain,
  command = "{toolchain.linker} {linker_group} {flags} {joined_sys_libs} -o {rel(out_bin)}",
  flags = [],
  linker_group = [
    "-Wl,--as-needed",
    "-Wl,--no-undefined",
    "-Wl,--start-group",
    "{rel(in_objs)}",
    "{rel(in_libs)}",
    "-Wl,--end-group",
  ],
  sys_libs = [],

  joined_sys_libs  = "{join_prefix('-l', sys_libs)}",
)

#----------------------------------------

def _cpp_lib(*, name, in_srcs = [], in_objs = [], in_libs = [], cpp_config = None, lib_config = None):
  objs = [
    compile_cpp(cpp_config, in_src = file)
    for file in flatten(in_srcs)
  ]
  return link_cpp_lib(
    lib_config,
    name = name,
    in_objs = [objs, in_objs, in_libs],
  )

def _cpp_bin(*, name, in_srcs = [], in_objs = [], in_libs = [], cpp_config = None, bin_config = None):
  objs = [
    compile_cpp(cpp_config, in_src = file)
    for file in flatten(in_srcs)
  ]
  return link_cpp_bin(
    bin_config,
    name = name,
    in_objs = [objs, in_objs, in_libs],
  )

cpp_lib = hancho.new_command(call = _cpp_lib)
cpp_bin = hancho.new_command(call = _cpp_bin)

####################################################################################################
# Makefiles

def _make(*, make_config = None, in_makefile):
  command = hancho.new_command(
    command     = "make -C {make_path} -f {make_file} {flags} > /dev/null",
    make_path   = "{path.dirname(in_makefile)}",
    make_file   = "{path.basename(in_makefile)}",
    flags       = "--quiet",
  )
  command(make_config, in_makefile = in_makefile)

make = hancho.new_command(call = _make)

####################################################################################################
# Tests

run_test = hancho.new_command(
  desc     = "Running test {rel(in_test)}",
  command  = "{in_test} {args} && touch {out_pass}",
  in_test  = None,
  args     = "",
  out_pass = "{in_test}.pass",
  log_path = "{in_test}.log",
)

def _cpp_test(*, name, in_srcs = [], in_objs = [], in_libs = [], cpp_config = None, bin_config = None, test_config = None):
  objs = [compile_cpp(cpp_config, in_src = src) for src in flatten(in_srcs)]
  bin = link_cpp_bin(
    bin_config,
    name = name,
    in_objs = [objs, in_objs, in_libs],
  )
  return run_test(test_config, in_test = bin)

cpp_test = hancho.new_command(call = _cpp_test)


"""
base = hancho.Config(
  toolchain  = "x86_64-linux-gnu",
  build_type = "-g -O0",
  warnings   = "-Wunused-variable -Werror",
  defines    = "-DCONFIG_DEBUG",
  cpp_std    = "-std=gnu++2a",
  includes   = "-I. -I{repo_dir} -I{repo_dir}/symlinks -I{repo_dir}/symlinks/metrolib -I{repo_dir}/symlinks/metron ",
)

exports.check_cpp = base.extend(
  desc    = "Syntax checking {rel(in_src)}",
  command = "{toolchain}-g++ -fsyntax-only -MMD {cpp_std} {warnings} {build_type} {includes} {defines} -c {rel(in_src)} && touch {rel(out_ok)}",
  in_src  = [],
  out_ok  = "{in_src}.ok",
  depfile = "{swap_ext(in_src, '.d')}",
)

exports.metron = hancho.Config(
  command = "{repo_dir}/symlinks/metron/build/debug/metron/metron/metron -q -v -e -c {in_src} -o {out_sv}",
  depfile = "{swap_ext(in_src, '.d')}",
  in_src  = [],
  out_sv  = "{swap_ext(in_src, '.sv')}",
)


check_cpp = base.command(
  desc        = "Syntax checking {source_files}",
  command     = "{toolchain}-g++ -fsyntax-only -MMD {cpp_std} {warnings} {build_type} {includes} {defines} -c {source_files} && touch {build_files}",
  build_files = "{swap_ext(source_files, '.ok')}",
  build_deps  = "{swap_ext(source_files, '.d')}",
)

metron = hancho.new_command(
  command   = "{repo_dir}/symlinks/metron/build/metron/metron -q -v -e -c {source_files} -o {build_files}",
  depfile   = "{swap_ext(source_files, '.d')}",
  build_files = "{swap_ext(source_files, '.sv')}",
)

exports.sv2v = hancho.Config(
  command = "symlinks/sv2v/bin/sv2v {includes} {in_src} -w {out_v}",
  in_src  = None,
  out_v   = "{in_src}.2.v",
)

"""
