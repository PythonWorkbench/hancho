import os

####################################################################################################
# Utils

touch_outputs = hancho.Command(
    command="touch {in_files}",
    in_files=None,
)

####################################################################################################
# C++

# ld_opt   = "{'-O3' if build_tag == 'release' else '-g -O0'}",

"""
if os.name == 'nt':
  exports.compile_cpp = hancho.Command(
    command     = "cl.exe /c {rel_source_files} /sourceDependencies {rel_build_deps} /Fo:{rel_build_files}",
    build_files = "{swap_ext(source_files, '.o')}",
    build_deps  = "{swap_ext(source_files, '.d')}",
    c_depformat = "msvc",
  )
elif os.name == 'posix':
  exports.compile_cpp = hancho.Command(
    command     = "gcc -MMD -c {rel_source_files} -o {rel_build_files}",
    build_files = "{swap_ext(source_files, '.o')}",
    build_deps  = "{swap_ext(source_files, '.d')}",
    c_depformat = "gcc",
  )
else:
  assert False
"""

# -------------------------------------------------------------------------------

default_toolchain = hancho.Config(
    arch="x86-64",
    compiler="x86_64-linux-gnu-g++",
    linker="x86_64-linux-gnu-g++",
)

riscv64_toolchain = hancho.Config(
    arch="riscv64",
    compiler="riscv64-unknown-elf-g++",
    linker="riscv64-unknown-elf-g++",
)

# ----------------------------------------

# rv_config = cpp_config.fork(
#  toolchain = "riscv64-unknown-elf",
#  arch       = "-march=rv32i -mabi=ilp32 -mstrict-align",
#  cpp_std    = "-std=gnu++2a",
#  build_type = "-g -Os",
#  flags = [
#    "-nostdlib",
#    "-nostartfiles",
#    "-Wl,-T {linkerscript}",
#  ],
#  #in_ld = "link.ld",
#  #sys_libs = ["gcc"],
#  #linkerscript = "{root_dir}/pinwheel/tools/pinwheel.ld",
# )

# ----------------------------------------

compile_cpp = hancho.Command(
    desc="Compiling C++ {rel(in_src)} -> {rel(out_obj)} ({build_tag})",
    in_src=None,
    out_obj="{swap_ext(in_src, '.o')}",
    c_deps="{swap_ext(in_src, '.d')}",
    toolchain=default_toolchain,
    command="{toolchain.compiler} {flags} {joined_warnings} {joined_defines} {joined_includes} -c {rel(in_src)} -o {rel(out_obj)}",
    cpp_std="gnu++2a",
    flags=[
        "-g",
        "-O0",
        "-MMD",
        "-march={toolchain.arch}",
        "-std={cpp_std}",
        "-fdiagnostics-color=always",
    ],
    warnings=[],
    defines=[],
    includes=[],
    joined_warnings="{join_prefix('-W', warnings)}",
    joined_defines="{join_prefix('-D', defines)}",
    joined_includes="{join_prefix('-I', includes)}",
)

# ----------------------------------------

link_cpp_lib = hancho.Command(
    desc="Bundling C++ lib {rel(out_lib)}",
    in_objs=None,
    out_lib=None,
    command="ar rcs {rel(out_lib)} {rel(in_objs)}",
)

# ----------------------------------------

link_cpp_bin = hancho.Command(
    desc="Linking C++ bin {rel(out_bin)}",
    in_objs=None,
    in_libs=[],
    out_bin=None,
    toolchain=default_toolchain,
    command="{toolchain.linker} {linker_group} {flags} {joined_sys_libs} -o {rel(out_bin)}",
    flags=[],
    linker_group=[
        "-Wl,--as-needed",
        "-Wl,--no-undefined",
        "-Wl,--start-group",
        "{rel(in_objs)}",
        "{rel(in_libs)}",
        "-Wl,--end-group",
    ],
    sys_libs=[],
    joined_sys_libs="{join_prefix('-l', sys_libs)}",
)

# ----------------------------------------


def cpp_lib(hancho, *args, in_srcs=[], in_objs=[], in_libs=[], out_lib = [], **kwargs):
    config = hancho.Config(*args, **kwargs)
    in_objs = hancho.flatten(in_objs)
    for file in hancho.flatten(in_srcs):
        obj = hancho(compile_cpp, config, in_src=file)
        in_objs.append(obj)
        
    return hancho(
        link_cpp_lib,
        config,
        in_objs=[in_objs, in_libs],
        out_lib=out_lib
    )


def cpp_bin(hancho, *args, in_srcs=[], in_objs=[], in_libs=[], out_bin = [], **kwargs):
    config = hancho.Config(args, kwargs)

    in_objs = hancho.flatten(in_objs)
    for file in hancho.flatten(in_srcs):
        obj = hancho(compile_cpp, config, in_src=file)
        in_objs.append(obj)

    return hancho(
        link_cpp_bin,
        config,
        in_objs=[in_objs, in_libs],
        out_bin = out_bin,
    )


####################################################################################################
# Makefiles


def make(hancho, /, *args, in_makefile, **kwargs):
    cmd = hancho.Command(
        desc        = "Run makefile {rel(in_makefile)}",
        command     = "make -C {make_dir} -f {make_file} {flags}", #  > /dev/null
        make_dir    = "{path.dirname(in_makefile)}",
        make_file   = "{path.basename(in_makefile)}",
        flags       = "--quiet",                
    )
    return hancho(cmd, *args, in_makefile = in_makefile, **kwargs)

####################################################################################################
# Tests

run_test = hancho.Command(
    desc     = "Running test {rel(in_test)}",
    command  = "{in_test} {args} && touch {out_pass}",
    task_dir = "{test_dir}",
    test_dir = "{mod_dir}",
    args     = "",
    in_test  = None,
    out_pass = "{in_test}.pass",
    log_path = "{in_test}.log",
)


def cpp_test(
    hancho,
    *args,
    in_srcs=[],
    in_objs=[],
    in_libs=[],
    out_bin=[],
    **kwargs
):
    config = hancho.Config(*args, **kwargs)
    objs = [hancho(compile_cpp, config, in_src=src) for src in hancho.flatten(in_srcs)]
    bin = hancho(
        link_cpp_bin,
        config,
        in_objs=[objs, in_objs, in_libs],
        out_bin=out_bin,
    )
    return hancho(run_test, config, in_test=bin)


"""
base = hancho.Config(
  toolchain  = "x86_64-linux-gnu",
  build_type = "-g -O0",
  warnings   = "-Wunused-variable -Werror",
  defines    = "-DCONFIG_DEBUG",
  cpp_std    = "-std=gnu++2a",
  includes   = "-I. -I{repo_dir} -I{repo_dir}/symlinks -I{repo_dir}/symlinks/metrolib -I{repo_dir}/symlinks/metron ",
)

exports.check_cpp = base.fork(
  desc    = "Syntax checking {rel(in_src)}",
  command = "{toolchain}-g++ -fsyntax-only -MMD {cpp_std} {warnings} {build_type} {includes} {defines} -c {rel(in_src)} && touch {rel(out_ok)}",
  in_src  = [],
  out_ok  = "{in_src}.ok",
  c_deps  = "{swap_ext(in_src, '.d')}",
)

exports.metron = hancho.Config(
  command = "{repo_dir}/symlinks/metron/build/debug/metron/metron/metron -q -v -e -c {in_src} -o {out_sv}",
  in_src  = [],
  out_sv  = "{swap_ext(in_src, '.sv')}",
  c_deps  = "{swap_ext(in_src, '.d')}",
)

check_cpp = base.Command(
  desc    = "Syntax checking {source_files}",
  command = "{toolchain}-g++ -fsyntax-only -MMD {cpp_std} {warnings} {build_type} {includes} {defines} -c {in_src} && touch {out_ok}",
  in_src  = None,
  out_ok  = "{swap_ext(source_files, '.ok')}",
  c_deps  = "{swap_ext(source_files, '.d')}",
)

metron = hancho.Command(
  command = "{repo_dir}/symlinks/metron/build/metron/metron -q -v -e -c {in_src} -o {out_sv}",
  c_deps  = "{swap_ext(in_src, '.d')}",
  out_sv  = "{swap_ext(in_src, '.sv')}",
)

exports.sv2v = hancho.Config(
  command = "symlinks/sv2v/bin/sv2v {includes} {in_src} -w {out_v}",
  in_src  = None,
  out_v   = "{in_src}.2.v",
)

"""
